#include "ov.ovm"
#include "fb.ovm"

LIBRARY ressourcesMonitor
	VERSION   = "V0.1 (Jun-2018)";
	AUTHOR    = "Michael Thies";
	COPYRIGHT = "";
	COMMENT   = "";
	
	/**
		Ressources & Environment Monitor
		
		Provides information about system environment and ressources usage in a Function Block interface. 
	*/
	CLASS systemMonitor : CLASS fb/functionblock
		IS_INSTANTIABLE;
		VARIABLES
			// Add variables here. The syntax is:
			// <Variable name> : <Datatype> [<Accessors>] [<FLAGS>] [<Comment>] [<INITIALVALUE>]
			sysOS : STRING FLAGS="o" COMMENT="Operating System of this system (linux, nt, ...)";
			sysOSVersion : STRING FLAGS="o" COMMENT="Operating System (Kernel) Version";
			cpuType : STRING FLAGS="o" COMMENT="Model name of this system's CPU.";
			cpuUsage : SINGLE FLAGS="o" COMMENT="Average CPU usage (computation time/total time) during last update interval";
			memSize : UINT FLAGS="o" COMMENT="System memory in kiB";
			memUsed : UINT FLAGS="o" COMMENT="Used memory in kiB (does not include Buffers and Caches on Linuxes)";
			ovArch : STRING FLAGS="o" COMMENT="OV cpu architecture (i386, amd64, arm, arm64)";
			ovDBSize : UINT FLAGS="o" COMMENT="Maximum size of the OV database in kiB";
			ovDBUsed : UINT FLAGS="o" COMMENT="Current size of the OV database in kiB";
			ovLibs[] : STRING FLAGS="o" COMMENT="List of currently loaded OV libraries";
			ovFbUrCycTime : TIME_SPAN FLAGS="o" COMMENT="Cycle time of the Fb UrTask in s";
			ovFbUrCalcTime : TIME_SPAN FLAGS="o" COMMENT="Required calculation time of the Fb UrTask's last execution in s";
			
			cpuLastTicks : UINT COMMENT="Saved number of total cpu time ticks at last measurement";
			cpuLastIdleTicks : UINT COMMENT="Saved number of cpu idle time ticks at last measurement";
		END_VARIABLES;
		OPERATIONS
			startup     : C_FUNCTION <OV_FNC_STARTUP>;
			typemethod  : C_FUNCTION <FB_FNC_TYPEMETHOD>;
		END_OPERATIONS;
	END_CLASS;
	
	
	/**
		A functionblock to provide a list of this system's local network connections.
		
		It queries the operating system at each execution for a full list of local network addresses and derives unique
		network identifiers.
	*/
	CLASS localNetMonitor : CLASS fb/functionblock
		IS_INSTANTIABLE;
		VARIABLES
			// Add variables here. The syntax is:
			// <Variable name> : <Datatype> [<Accessors>] [<FLAGS>] [<Comment>] [<INITIALVALUE>]
			localNetworks[] : STRING FLAGS="o" COMMENT="A list of network identifiers of networks, this system is connected to";
		END_VARIABLES;
		
		OPERATIONS
			typemethod  : C_FUNCTION <FB_FNC_TYPEMETHOD>;
		END_OPERATIONS;
	END_CLASS;
	
	/**
		A functionblock to register this OV instance with Avahi or Bonjour via libdns_sd for network discovery via mDNS.
	*/
	CLASS mDNSRegisterer : CLASS fb/functionblock
		IS_INSTANTIABLE;
		VARIABLES
			register : BOOL FLAGS="i" COMMENT="The server is only registered if True." INITIALVALUE=TRUE;
			sdRef : C_TYPE <DNSServiceRef>;
			isRegistered : BOOL FLAGS="o" COMMENT="True when the server has successfully been registered";
		END_VARIABLES;
		
		OPERATIONS
			typemethod  : C_FUNCTION <FB_FNC_TYPEMETHOD>;
		END_OPERATIONS;
	END_CLASS;
	
END_LIBRARY;
