#include "ov.ovm"
#include "fb.ovm"
#include "ovdatastruct.ovm"
#include "geometry2d.ovm"

/**
*
*   Chair of Process Control Engineering
*   Licensed under the Apache License, Version 2.0 (the "License");
*   you may not use this file except in compliance with the License.
*   You may obtain a copy of the License at
*
*       http://www.apache.org/licenses/LICENSE-2.0
*
*   Unless required by applicable law or agreed to in writing, software
*   distributed under the License is distributed on an "AS IS" BASIS,
*   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*   See the License for the specific language governing permissions and
*   limitations under the License.
*
*
 * Some Classes now have the Flag "v". This means volatile. 
 * This flag will be used in a clean-up function of the ov_runtimeserver to determine if an object needs to be deleted before the server starts up. 
 */

LIBRARY TGraph
	VERSION   = "v0.1 15-06-2018";
	AUTHOR    = "Zolboo Erdenebayar";
	COPYRIGHT = "Copyright (C) 2013 Lehrstuhl fuer Prozessleittechnik, RWTH Aachen";
	COMMENT   = "Graph structur";
	
	CLASS graph : CLASS ov/domain
		IS_INSTANTIABLE;
    COMMENT   = "Graph class. For now basically just container containing Nodes and Edges";
		VARIABLES
			NumOfNodes:	UINT	 FLAGS = "o"		COMMENT = "Num of Nodes"  INITIALVALUE=0;
			NumOfEdges:	UINT	 FLAGS = "o"		COMMENT = "Num of Edges"  INITIALVALUE=0;
		END_VARIABLES;
		PARTS
			Nodes: CLASS ov/domain;
			Edges: CLASS ov/domain;
		END_PARTS;
		OPERATIONS
			constructor  : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
			getaccess			:	C_FUNCTION <OV_FNC_GETACCESS>;		/*	just to make all variables visible on KS	*/
			linkNodes  : C_FUNCTION <TGRAPH_FNC_LINKNODES>;
			areNodesLinked  : C_FUNCTION <TGRAPH_FNC_ARENODESLINKED>;
		END_OPERATIONS;
	END_CLASS;

	CLASS Node : CLASS fb/functionblock
		IS_INSTANTIABLE;
    COMMENT   = "Node";
		VARIABLES			
			Position[]:	SINGLE	 FLAGS = "i"		COMMENT = "Location of the node"	;
			POI:		BOOL	 FLAGS = "i"		COMMENT = "is a Point of Interest?"		INITIALVALUE = FALSE;
		END_VARIABLES;
		OPERATIONS
			constructor  : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
			typemethod  : C_FUNCTION <FB_FNC_TYPEMETHOD>;
		END_OPERATIONS;
	END_CLASS;
	
		CLASS Edge : CLASS fb/functionblock
		IS_INSTANTIABLE; 
		VARIABLES
			Direction[] :		SINGLE	 FLAGS = "i"		COMMENT = "Direction between nodes";
			Actuator:		STRING	 FLAGS = "i"		COMMENT = "PnID Actuator ID"		INITIALVALUE = "N";
			actVelocity[]:	SINGLE	 FLAGS = "i"		COMMENT = "Actuator speed and direction";
			physicalCost[]:	SINGLE	HAS_GET_ACCESSOR FLAGS = "i"			COMMENT = "Weight due to travel";
			trafficCost[]:	SINGLE	 FLAGS = "i"			COMMENT = "Weight due to traffice";
		END_VARIABLES; 
		OPERATIONS  
			constructor  : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
			typemethod  : C_FUNCTION <FB_FNC_TYPEMETHOD>;
		END_OPERATIONS;
	END_CLASS; 
	
		CLASS OpEdge : CLASS fb/functionblock
		IS_INSTANTIABLE; 
		VARIABLES
			Length :		SINGLE	 FLAGS = "i"		COMMENT = "Distance between nodes"	INITIALVALUE = 0.0;
			Actuator[]:		STRING	 FLAGS = "i"		COMMENT = "PnID Actuator ID";			
			physicalCost:	SINGLE	 FLAGS = "i"		COMMENT = "Weight due to travel"	INITIALVALUE = 0.0;
			trafficCost:	SINGLE	 FLAGS = "i"		COMMENT = "Weight due to traffic"	INITIALVALUE = 0.0;
			totalCost:		SINGLE HAS_GET_ACCESSOR FLAGS = "i"			COMMENT = "Total weight";
		END_VARIABLES;  
		OPERATIONS 
			typemethod  : C_FUNCTION <FB_FNC_TYPEMETHOD>;
		END_OPERATIONS; 
	END_CLASS;
	
	ASSOCIATION Start : ONE_TO_MANY 
		PARENT nodePortStart   : CLASS TGraph/Node;
		CHILD  edgePortStart   : CLASS TGraph/Edge;
	END_ASSOCIATION;
	
	ASSOCIATION End : ONE_TO_MANY 
		PARENT	nodePortEnd  : CLASS TGraph/Node; 
		CHILD		edgePortEnd  : CLASS TGraph/Edge;
	END_ASSOCIATION;
	

END_LIBRARY;
